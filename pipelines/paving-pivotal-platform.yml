---

resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
    tag: latest
- name: semver-config
  type: docker-image
  source:
    repository: itstarting/semver-config-concourse-resource
    tag: 1.1.0

# reusable stuff
credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  input_mapping:
    files: configuration
  params:
    CREDHUB_SERVER: ((credhub.server))
    CREDHUB_CA_CERT: ((credhub.ca_cert))
    CREDHUB_CLIENT: ((credhub.client))
    CREDHUB_SECRET: ((credhub.secret))
    PREFIX: /concourse/((foundation))
    INTERPOLATION_PATHS: ((credhub.interpolate_folders))

resources:
- name: daily-ci
  type: time
  source:
    start: 1:00 AM
    stop: 2:00 AM
    location: America/Chicago
- name: configuration
  type: git
  source:
    private_key: ((git.private_key))
    username: ((git.user.username))
    password: ((git.user.password))
    uri: ((git.configuration.uri))
    branch: master
- name: installation
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.foundation))
    regexp: ((foundation))-installation-after-(.*).zip
- name: paving
  type: git
  source:
    branch: master
    uri: git@github.com:pivotal/paving.git
    private_key: ((git_ssh_key))
- name: platform-automation-image
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.platform_automation))
    regexp: .*image-(.*).tgz
- name: platform-automation-tasks
  type: s3
  source:
    endpoint: ((s3.endpoint))
    region_name: ((s3.region_name))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.secret_access_key))
    bucket: ((s3.buckets.platform_automation))
    regexp: .*tasks-(.*).zip
- name: product-config-opsman
  type: semver-config
  source:
    driver: git
    uri: ((git.configuration.uri))
    branch: master
    private_key: ((git.private_key))
    username: ((git.user.username))
    password: ((git.user.password))
    config_file: ((foundation))/products.yml
    config_path: products.opsman
    version_path: products.opsman.product-version
    version_pattern: "m.n.p"
- name: terraform
  type: terraform
  source:
    env_name: ((foundation))
    backend_type: gcs
    backend_config:
      bucket: terraform-state-dashaun-cloud
      prefix: ((foundation))
      credentials: ((gcp_credentials_json))
    delete_on_failure: true
    vars:
      environment_name: ((foundation))
      region: ((region))
      dns_suffix: ((dns_suffix))
      hosted_zone: ((hosted_zone))
      availability_zones: ((availability_zones))
      access_key: ((access_key))
      secret_key: ((secret_key))
      project: ((project))
      service_account_key: ((gcp_credentials_json))
      ssl_certificate: ((acme_cert.certificate))
      ssl_private_key: ((acme_cert.private_key))
- name: product-config-pas
  source:
    branch: master
    config_file: ((foundation))/products.yml
    config_path: products.pas
    driver: git
    private_key: ((git.private_key))
    uri: ((git.configuration.uri))
    username: ((git.user.username))
    password: ((git.user.password))
    version_path: products.pas.product-version
    version_pattern: m.n.*
  type: semver-config
- name: product-config-pas-stemcell
  source:
    branch: master
    config_file: ((foundation))/products.yml
    config_path: products.pas-stemcell
    driver: git
    private_key: ((git.private_key))
    uri: ((git.configuration.uri))
    username: ((git.user.username))
    password: ((git.user.password))
    version_path: products.pas-stemcell.product-version
    version_pattern: '-'
  type: semver-config
- name: product-config-pks
  source:
    branch: master
    config_file: ((foundation))/products.yml
    config_path: products.pks
    driver: git
    private_key: ((git.private_key))
    uri: ((git.configuration.uri))
    username: ((git.user.username))
    password: ((git.user.password))
    version_path: products.pks.product-version
    version_pattern: m.n.*
  type: semver-config
- name: product-config-pks-stemcell
  source:
    branch: master
    config_file: ((foundation))/products.yml
    config_path: products.pks-stemcell
    driver: git
    private_key: ((git.private_key))
    uri: ((git.configuration.uri))
    username: ((git.user.username))
    password: ((git.user.password))
    version_path: products.pks-stemcell.product-version
    version_pattern: '-'
  type: semver-config

jobs:
- name: paving-apply
  plan:
  - get: daily-ci
    trigger: true
  - get: paving
    trigger: false
  - put: terraform
    params:
      env_name: ((foundation))
      terraform_source: paving/((iaas))
- name: store-tfstate-in-credhub
  plan:
  - get: terraform
    trigger: true
    passed: [paving-apply]
  - task: store-tfstate
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentpaas/bosh-cli-v2
          tag: latest
      inputs:
        - name: terraform
      params:
        CH_USER: ((credhub_username))
        CH_PASS: ((credhub_password))
        CH_URL: ((credhub_url))
        CH_CA: ((credhub_ca_cert))
      run:
        path: bash
        args:
          - -c
          - |
            credhub login --client-name="$CH_USER" --client-secret="$CH_PASS" -s "$CH_URL" --ca-cert="$CH_CA"
            credhub delete -n /concourse/((foundation))/tfstate
            credhub set -n /concourse/((foundation))/tfstate -t value -v "$(cat terraform/metadata)"
  - task: expand-tfstate-keys
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentpaas/bosh-cli-v2
          tag: latest
      inputs:
        - name: terraform
      params:
        CH_USER: ((credhub_username))
        CH_PASS: ((credhub_password))
        CH_URL: ((credhub_url))
        CH_CA: ((credhub_ca_cert))
      run:
        path: bash
        args:
          - -c
          - |
            credhub login --client-name="$CH_USER" --client-secret="$CH_PASS" -s "$CH_URL" --ca-cert="$CH_CA"
            apt-get update -qq -y
            apt-get install jq -qq -y
            credhub get -n /concourse/((foundation))/tfstate -j | jq -r .value | jq -r .stable_config >> stable_config.json
            cat "stable_config.json" | jq -r '. | keys[]' |
            while IFS= read -r value; do
                credhub delete -n "/concourse/((foundation))/tf_$value"
                credhub set -n "/concourse/((foundation))/tf_$value" -t value -v "$(cat stable_config.json | jq -r .$value | sed 's/\.$//' )"
            done
  - task: expand-tfstate-keys-with-arrays
    config:
      platform: linux
      image_resource:
        type: registry-image
        source:
          repository: governmentpaas/bosh-cli-v2
          tag: latest
      inputs:
      - name: terraform
      params:
        CH_USER: ((credhub_username))
        CH_PASS: ((credhub_password))
        CH_URL: ((credhub_url))
        CH_CA: ((credhub_ca_cert))
      run:
        path: bash
        args:
          - -c
          - |
            credhub login --client-name="$CH_USER" --client-secret="$CH_PASS" -s "$CH_URL" --ca-cert="$CH_CA"
            apt-get update -qq -y
            apt-get install jq -qq -y
            credhub get -n /concourse/((foundation))/tfstate -j | jq -r .value | jq -r .stable_config >> stable_config.json
            cat "stable_config.json" | jq -r '. | keys[]' |
            while IFS= read -r value; do
                KEY=$value
                CH_PATH="/concourse/((foundation))/tf_$KEY"
                VAL="$(credhub get -n $CH_PATH -j | jq -r .value)"
                COUNTER=0
                for row in $(echo "$VAL" | jq -r .[] 2> /dev/null); do
                    credhub delete -n "$CH_PATH"_"$COUNTER"
                    credhub set -n "$CH_PATH"_"$COUNTER" -t value -v "$row"
                    let COUNTER=COUNTER+1
                done
            done
- name: create-opsman-and-configure-auth
  serial: true
  plan:
  - in_parallel:
    - get: product-config-opsman
      trigger: true
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: configuration
      trigger: false
    - get: terraform
      trigger: true
      passed: [store-tfstate-in-credhub]
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    input_mapping:
      config: product-config-opsman
      vars: interpolated-files
    params:
      CONFIG_FILE: semver-config.yaml
      VARS_FILES: vars/((foundation))/config/global.yml
  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      image: downloaded-product
      state: configuration
      config: configuration
      vars: interpolated-files
    params:
      OPSMAN_CONFIG_FILE: ((foundation))/products/ops-manager.yml
      VARS_FILES: vars/((foundation))/vars/ops-manager-vars.yml
      STATE_FILE: ((foundation))/state/state.yml
    on_success:
      do:
      - task: make-commit
        image: platform-automation-image
        file: platform-automation-tasks/tasks/make-git-commit.yml
        input_mapping:
          repository: configuration
          file-source: generated-state
        output_mapping:
          repository-commit: configuration-commit
        params:
          FILE_SOURCE_PATH: state.yml
          FILE_DESTINATION_PATH: ((foundation))/state/state.yml
          GIT_AUTHOR_EMAIL: ((git.user.email))
          GIT_AUTHOR_NAME: ((git.user.username))
          COMMIT_MESSAGE: "Add or update state file: state.yml"
      - put: configuration
        params:
          repository: configuration-commit
          merge: true
  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-files
      config: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/config/auth.yml


  # 2. generate-director-config
- name: generate-director-config
  serial: true
  plan:
    - in_parallel:
        - get: product-config-opsman
          trigger: true
          passed: [create-opsman-and-configure-auth]
        - get: platform-automation-image
          params: {unpack: true}
        - get: platform-automation-tasks
          params: {unpack: true}
        - get: configuration
        - get: terraform
          trigger: true
          passed: [create-opsman-and-configure-auth]
    - task: credhub-interpolate
      <<: *credhub-interpolate
    - task: staged-director-config
      image: platform-automation-image
      file: platform-automation-tasks/tasks/staged-director-config.yml
      input_mapping:
        env: interpolated-files
      params:
        ENV_FILE: ((foundation))/env/env.yml
      on_success: &make-config-commit
        do:
          - task: make-commit
            image: platform-automation-image
            file: platform-automation-tasks/tasks/make-git-commit.yml
            input_mapping:
              repository: configuration
              file-source: generated-config
            output_mapping:
              repository-commit: configuration-commit
            params:
              FILE_SOURCE_PATH: director.yml
              FILE_DESTINATION_PATH: ((foundation))/generated-config/director.yml
              GIT_AUTHOR_EMAIL: ((git.user.email))
              GIT_AUTHOR_NAME: ((git.user.username))
              COMMIT_MESSAGE: "Add or update product config: director.yml"
          - put: configuration
            params:
              repository: configuration-commit
              merge: true

  # 3. configure-director
- name: configure-director
  serial: true
  plan:
    - in_parallel:
      - get: configuration
      - get: product-config-opsman
        trigger: true
        passed: [create-opsman-and-configure-auth,generate-director-config]
      - get: platform-automation-image
        params: {unpack: true}
      - get: platform-automation-tasks
        params: {unpack: true}
      - get: terraform
        trigger: true
        passed: [generate-director-config]
    - task: credhub-interpolate
      <<: *credhub-interpolate
    - task: configure-director
      image: platform-automation-image
      file: platform-automation-tasks/tasks/configure-director.yml
      input_mapping:
        config: configuration
        env: interpolated-files
        vars: interpolated-files
      params:
        ENV_FILE: ((foundation))/env/env.yml
        DIRECTOR_CONFIG_FILE: ((foundation))/products/director.yml
        VARS_FILES: vars/((foundation))/vars/director-vars.yml

  # 4. apply-director-changes
- name: apply-director-changes
  serial: true
  plan:
    - in_parallel:
        - get: product-config-opsman
          trigger: true
          passed: [configure-director]
        - get: platform-automation-image
          params: {unpack: true}
        - get: platform-automation-tasks
          params: {unpack: true}
        - get: configuration
        - get: terraform
          trigger: true
          passed: [configure-director]
    - task: credhub-interpolate
      <<: *credhub-interpolate
    - task: apply-director-changes
      image: platform-automation-image
      file: platform-automation-tasks/tasks/apply-director-changes.yml
      input_mapping:
        env: interpolated-files
      params:
        ENV_FILE: ((foundation))/env/env.yml

  # 5. export-installation
- name: export-installation
  serial: true
  plan:
  - in_parallel:
      - get: terraform
        trigger: true
        passed: [apply-director-changes]
      - get: platform-automation-image
        params: {unpack: true}
      - get: platform-automation-tasks
        params: {unpack: true}
      - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: ((foundation))-installation-after-ops-manager.zip
  - put: installation
    params:
      file: installation/((foundation))-installation-after-ops-manager.zip

#download-upload-stage-product-pas
- name: download-upload-stage-product-pas
  plan:
  - in_parallel:
      steps:
        - get: terraform
          trigger: true
          passed: [apply-director-changes]
        - get: product-config-pas
          trigger: true
        - get: product-config-pas-stemcell
          params:
            filename: semver-config-stemcell
            format: yaml
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
  - file: platform-automation-tasks/tasks/credhub-interpolate.yml
    image: platform-automation-image
    input_mapping:
      files: configuration
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_username))
      CREDHUB_SECRET: ((credhub_password))
      CREDHUB_SERVER: ((credhub_url))
      INTERPOLATION_PATHS: gcp-tinderbox/config gcp-tinderbox/env gcp-tinderbox/vars
      PREFIX: /concourse/gcp-tinderbox
    task: credhub-interpolate
  - file: platform-automation-tasks/tasks/download-product.yml
    image: platform-automation-image
    input_mapping:
      config: product-config-pas
      vars: interpolated-files
    params:
      CONFIG_FILE: semver-config.yaml
      VARS_FILES: vars/gcp-tinderbox/config/global.yml
    task: download-product
  - file: platform-automation-tasks/tasks/upload-product.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
      product: downloaded-product
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
    task: upload-product
  - file: platform-automation-tasks/tasks/stage-product.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
      product: downloaded-product
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
    task: stage-product
  - file: platform-automation-tasks/tasks/download-product.yml
    image: platform-automation-image
    input_mapping:
      config: product-config-pas-stemcell
      vars: interpolated-files
    params:
      CONFIG_FILE: semver-config-stemcell.yaml
      VARS_FILES: vars/gcp-tinderbox/config/global.yml
    task: download-stemcell
  - file: platform-automation-tasks/tasks/upload-stemcell.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
      stemcell: downloaded-product
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
      FLOATING_STEMCELL: false
    task: upload-stemcell
  - config:
      container_limits: {}
      inputs:
        - name: product-config-pas-stemcell
        - name: interpolated-files
      outputs:
        - name: assign-stemcell-config
      platform: linux
      run:
        args:
          - -exc
          - |
            stemcell_version="$( om interpolate \
            --config product-config-pas-stemcell/semver-config-stemcell.yaml \
            --vars-file interpolated-files/gcp-tinderbox/config/global.yml \
            --path /product-version )"
            echo "{\"product\":\"cf\",\"stemcell\":\"$stemcell_version\"}" > assign-stemcell-config/config.yml
            cat assign-stemcell-config/config.yml
        path: sh
    image: platform-automation-image
    task: prepare-assign-stemcell-config
  - file: platform-automation-tasks/tasks/assign-stemcell.yml
    image: platform-automation-image
    input_mapping:
      config: assign-stemcell-config
      env: interpolated-files
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
    task: assign-stemcell
  serial: true
  serial_groups:
  - download-upload-stage-product
- name: generate-product-config-pas
  plan:
  - in_parallel:
      steps:
        - get: terraform
          trigger: true
          passed:
            - download-upload-stage-product-pas
        - get: product-config-pas
          passed:
            - download-upload-stage-product-pas
          trigger: true
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
  - file: platform-automation-tasks/tasks/credhub-interpolate.yml
    image: platform-automation-image
    input_mapping:
      files: configuration
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_username))
      CREDHUB_SECRET: ((credhub_password))
      CREDHUB_SERVER: ((credhub_url))
      INTERPOLATION_PATHS: gcp-tinderbox/config gcp-tinderbox/env gcp-tinderbox/vars
      PREFIX: /concourse/gcp-tinderbox
    task: credhub-interpolate
  - file: platform-automation-tasks/tasks/staged-config.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
    on_success:
      do:
        - file: platform-automation-tasks/tasks/make-git-commit.yml
          image: platform-automation-image
          input_mapping:
            file-source: generated-config
            repository: configuration
          output_mapping:
            repository-commit: configuration-commit
          params:
            COMMIT_MESSAGE: 'Add or update product config: elastic-runtime.yml'
            FILE_DESTINATION_PATH: gcp-tinderbox/generated-config/elastic-runtime.yml
            FILE_SOURCE_PATH: cf.yml
            GIT_AUTHOR_EMAIL: robot@company.com
            GIT_AUTHOR_NAME: mrrobot
          task: make-commit
        - params:
            merge: true
            repository: configuration-commit
          put: configuration
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
      PRODUCT_NAME: cf
    task: staged-config
  serial: true
  serial_groups:
  - generate-product-config
#Configure Product PAS
- name: configure-product-pas
  plan:
  - in_parallel:
      steps:
        - get: terraform
          trigger: true
          passed:
            - generate-product-config-pas
        - get: product-config-pas
          trigger: true
          passed:
            - generate-product-config-pas
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
  - file: platform-automation-tasks/tasks/credhub-interpolate.yml
    image: platform-automation-image
    input_mapping:
      files: configuration
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_username))
      CREDHUB_SECRET: ((credhub_password))
      CREDHUB_SERVER: ((credhub_url))
      INTERPOLATION_PATHS: gcp-tinderbox/config gcp-tinderbox/env gcp-tinderbox/vars
      PREFIX: /concourse/gcp-tinderbox
    task: credhub-interpolate
  - file: platform-automation-tasks/tasks/configure-product.yml
    image: platform-automation-image
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: gcp-tinderbox/products/elastic-runtime.yml
      ENV_FILE: gcp-tinderbox/env/env.yml
      VARS_FILES: vars/gcp-tinderbox/vars/elastic-runtime-vars.yml
    task: configure-product
  serial: true
  serial_groups:
  - configure-product


#Download Upload Stage Product PKS
- name: download-upload-stage-product-pks
  plan:
  - in_parallel:
      steps:
        - get: terraform
          trigger: true
          passed: [apply-director-changes]
        - get: product-config-pks
          trigger: true
        - get: product-config-pks-stemcell
          params:
            filename: semver-config-stemcell
            format: yaml
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
  - file: platform-automation-tasks/tasks/credhub-interpolate.yml
    image: platform-automation-image
    input_mapping:
      files: configuration
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_username))
      CREDHUB_SECRET: ((credhub_password))
      CREDHUB_SERVER: ((credhub_url))
      INTERPOLATION_PATHS: gcp-tinderbox/config gcp-tinderbox/env gcp-tinderbox/vars
      PREFIX: /concourse/gcp-tinderbox
    task: credhub-interpolate
  - file: platform-automation-tasks/tasks/download-product.yml
    image: platform-automation-image
    input_mapping:
      config: product-config-pks
      vars: interpolated-files
    params:
      CONFIG_FILE: semver-config.yaml
      VARS_FILES: vars/gcp-tinderbox/config/global.yml
    task: download-product
  - file: platform-automation-tasks/tasks/upload-product.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
      product: downloaded-product
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
    task: upload-product
  - file: platform-automation-tasks/tasks/stage-product.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
      product: downloaded-product
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
    task: stage-product
  - file: platform-automation-tasks/tasks/download-product.yml
    image: platform-automation-image
    input_mapping:
      config: product-config-pks-stemcell
      vars: interpolated-files
    params:
      CONFIG_FILE: semver-config-stemcell.yaml
      VARS_FILES: vars/gcp-tinderbox/config/global.yml
    task: download-stemcell
  - file: platform-automation-tasks/tasks/upload-stemcell.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
      stemcell: downloaded-product
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
      FLOATING_STEMCELL: false
    task: upload-stemcell
  - config:
      container_limits: {}
      inputs:
        - name: product-config-pks-stemcell
        - name: interpolated-files
      outputs:
        - name: assign-stemcell-config
      platform: linux
      run:
        args:
          - -exc
          - |
            stemcell_version="$( om interpolate \
            --config product-config-pks-stemcell/semver-config-stemcell.yaml \
            --vars-file interpolated-files/gcp-tinderbox/config/global.yml \
            --path /product-version )"
            echo "{\"product\":\"pivotal-container-service\",\"stemcell\":\"$stemcell_version\"}" > assign-stemcell-config/config.yml
            cat assign-stemcell-config/config.yml
        path: sh
    image: platform-automation-image
    task: prepare-assign-stemcell-config
  - file: platform-automation-tasks/tasks/assign-stemcell.yml
    image: platform-automation-image
    input_mapping:
      config: assign-stemcell-config
      env: interpolated-files
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
    task: assign-stemcell
  serial: true
  serial_groups:
  - download-upload-stage-product

#Generate Product Config PKS
- name: generate-product-config-pks
  plan:
  - in_parallel:
      steps:
        - get: terraform
          trigger: true
          passed:
            - download-upload-stage-product-pks
        - get: product-config-pks
          passed:
            - download-upload-stage-product-pks
          trigger: true
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
  - file: platform-automation-tasks/tasks/credhub-interpolate.yml
    image: platform-automation-image
    input_mapping:
      files: configuration
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_username))
      CREDHUB_SECRET: ((credhub_password))
      CREDHUB_SERVER: ((credhub_url))
      INTERPOLATION_PATHS: gcp-tinderbox/config gcp-tinderbox/env gcp-tinderbox/vars
      PREFIX: /concourse/gcp-tinderbox
    task: credhub-interpolate
  - file: platform-automation-tasks/tasks/staged-config.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
    on_success:
      do:
        - file: platform-automation-tasks/tasks/make-git-commit.yml
          image: platform-automation-image
          input_mapping:
            file-source: generated-config
            repository: configuration
          output_mapping:
            repository-commit: configuration-commit
          params:
            COMMIT_MESSAGE: 'Add or update product config: pivotal-container-service.yml'
            FILE_DESTINATION_PATH: gcp-tinderbox/generated-config/pivotal-container-service.yml
            FILE_SOURCE_PATH: pivotal-container-service.yml
            GIT_AUTHOR_EMAIL: robot@company.com
            GIT_AUTHOR_NAME: mrrobot
          task: make-commit
        - params:
            merge: true
            repository: configuration-commit
          put: configuration
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
      PRODUCT_NAME: pivotal-container-service
    task: staged-config
  serial: true
  serial_groups:
  - generate-product-config

- name: configure-product-pks
  plan:
  - in_parallel:
      steps:
        - get: terraform
          trigger: true
          passed:
            - generate-product-config-pks
        - get: product-config-pks
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
  - file: platform-automation-tasks/tasks/credhub-interpolate.yml
    image: platform-automation-image
    input_mapping:
      files: configuration
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_username))
      CREDHUB_SECRET: ((credhub_password))
      CREDHUB_SERVER: ((credhub_url))
      INTERPOLATION_PATHS: gcp-tinderbox/config gcp-tinderbox/env gcp-tinderbox/vars
      PREFIX: /concourse/gcp-tinderbox
    task: credhub-interpolate
  - file: platform-automation-tasks/tasks/configure-product.yml
    image: platform-automation-image
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: gcp-tinderbox/products/pivotal-container-service.yml
      ENV_FILE: gcp-tinderbox/env/env.yml
      VARS_FILES: vars/gcp-tinderbox/vars/pivotal-container-service-vars.yml
    task: configure-product
  serial: true
  serial_groups:
  - configure-product

- name: apply-product-changes
  plan:
  - in_parallel:
      steps:
        - get: terraform
          trigger: true
          passed:
            - configure-product-pas
            - configure-product-pks
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: configuration
  - file: platform-automation-tasks/tasks/credhub-interpolate.yml
    image: platform-automation-image
    input_mapping:
      files: configuration
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_username))
      CREDHUB_SECRET: ((credhub_password))
      CREDHUB_SERVER: ((credhub_url))
      INTERPOLATION_PATHS: gcp-tinderbox/config gcp-tinderbox/env gcp-tinderbox/vars
      PREFIX: /concourse/gcp-tinderbox
    task: credhub-interpolate
  - file: platform-automation-tasks/tasks/apply-changes.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
    task: apply-product-changes
  serial: true

- name: delete-installation
  plan:
  - in_parallel:
      steps:
        - get: platform-automation-image
          params:
            unpack: true
        - get: platform-automation-tasks
          params:
            unpack: true
        - get: terraform
          trigger: true
          passed:
          - apply-product-changes
        - get: configuration
  - file: platform-automation-tasks/tasks/credhub-interpolate.yml
    image: platform-automation-image
    input_mapping:
      files: configuration
    params:
      CREDHUB_CA_CERT: ((credhub_ca_cert))
      CREDHUB_CLIENT: ((credhub_username))
      CREDHUB_SECRET: ((credhub_password))
      CREDHUB_SERVER: ((credhub_url))
      INTERPOLATION_PATHS: gcp-tinderbox/config gcp-tinderbox/env gcp-tinderbox/vars
      PREFIX: /concourse/gcp-tinderbox
    task: credhub-interpolate
  - file: platform-automation-tasks/tasks/delete-installation.yml
    image: platform-automation-image
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: gcp-tinderbox/env/env.yml
    task: delete-installation

- name: delete-opsman
  serial: true
  plan:
  - in_parallel:
    - get: product-config-opsman
    - get: platform-automation-image
      params: {unpack: true}
    - get: platform-automation-tasks
      params: {unpack: true}
    - get: terraform
      trigger: true
      passed:
      - delete-installation
    - get: configuration
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: delete-opsman
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      vars: interpolated-files
      config: configuration
      state: configuration
    params:
      VARS_FILES: vars/((foundation))/vars/ops-manager-vars.yml
      OPSMAN_CONFIG_FILE: ((foundation))/products/ops-manager.yml
      STATE_FILE: ((foundation))/state/state.yml
    on_success:
      do:
      - task: make-commit
        image: platform-automation-image
        file: platform-automation-tasks/tasks/make-git-commit.yml
        input_mapping:
          repository: configuration
          file-source: generated-state
        output_mapping:
          repository-commit: configuration-commit
        params:
          FILE_SOURCE_PATH: state.yml
          FILE_DESTINATION_PATH: ((foundation))/state/state.yml
          GIT_AUTHOR_EMAIL: ((git.user.email))
          GIT_AUTHOR_NAME: ((git.user.username))
          COMMIT_MESSAGE: "Add or update state file: state.yml"
      - put: configuration
        params:
          repository: configuration-commit
          merge: true
- name: paving-destroy
  plan:
  - get: terraform
    trigger: true
    passed:
    - delete-opsman
  - get: configuration
  - get: paving
    trigger: false
  - put: terraform
    get_params:
      action: destroy
    params:
      action: destroy
      env_name: ((foundation))
      terraform_source: paving/((iaas))